import os
import asyncio
import aiohttp
import logging
import random
import sys
import time
from colorama import Fore, Style, init

init(autoreset=True)

CHANNEL_COLORS = [Fore.CYAN, Fore.YELLOW, Fore.GREEN, Fore.RED, Fore.MAGENTA]
MAX_CONCURRENT_REQUESTS = 3

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', handlers=[
    logging.FileHandler("app.log"),
    logging.StreamHandler()
])

def print_header():
    header = f"""
{Fore.RED}{Style.BRIGHT}‚ñë‚ñà‚ñÄ‚ñÄ‚ñà ‚îÄ‚ñà‚ñÄ‚ñÄ‚ñà ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ 
{Fore.RED}{Style.BRIGHT}‚ñë‚ñà‚ñÑ‚ñÑ‚ñà ‚ñë‚ñà‚ñÑ‚ñÑ‚ñà ‚îÄ‚ñë‚ñà‚îÄ‚îÄ 
{Fore.RED}{Style.BRIGHT}‚ñë‚ñà‚îÄ‚îÄ‚îÄ ‚ñë‚ñà‚îÄ‚ñë‚ñà ‚îÄ‚ñë‚ñà‚îÄ‚îÄ
‚Ä¢High-speed modern connection üí´
‚Ä¢Remakable: Phi√™n b·∫£n limited üåü 
    """
    print(header)

def print_author():
    author_info = f"""{Fore.CYAN}
 ‚Ü¶  ‚Ü¶  ‚Ü¶  ‚Ü¶  ‚Ü¶  ‚Ü¶  ‚Ü¶  ‚Ü¶  ‚Ü¶  ‚Ü¶  
‚Üß {Fore.RED}Copyright: Ph·∫°m Anh Ti·∫ønüß∏   ‚Ü•
‚Üß {Fore.BLUE}Discord: rabbit.misaily     ‚Ü•
‚Üß {Fore.GREEN}Instagram: rabbit.misaily   ‚Ü•
‚Üß {Fore.MAGENTA}Zalo: 0775146398            ‚Ü•
 ‚Ü§  ‚Ü§  ‚Ü§  ‚Ü§  ‚Ü§  ‚Ü§  ‚Ü§  ‚Ü§  ‚Ü§  ‚Ü§  
    """
    print(author_info)
    
def print_instructions():
    instructions = f"""{Style.BRIGHT + Fore.WHITE}
‚öôÔ∏è  Dev Tool By Pham Anh Tien üñ•Ô∏è
‚Æï Ch·ª©c nƒÉng 1: Spam tin nh·∫Øn.
‚Æï Ch·ª©c nƒÉng 2: Nh√¢y (tag ho·∫∑c ƒë·ªÉ tr·ªëng).
‚Æï Ch·ª©c nƒÉng 3: Nh√¢y Fake Typing (gi·∫£ so·∫°n tin nh·∫Øn).
‚Æï Ch·ª©c nƒÉng 4: R√©o t√™n ( c√≥ fake typing)
 Nh·∫≠p s·ªë 1, 2, 3 or 4 ƒë·ªÉ ch·ªçn ch·ª©c nƒÉng.
 
 ‚Ä¢‚Ä¢‚Ä¢{Fore.YELLOW}C√°ch s·ª≠ d·ª•ng tool‚Ä¢‚Ä¢‚Ä¢
- ƒê·ªëi v·ªõi ch·ª©c nƒÉng 2,3,4. B·∫°n ch·ªçn y/n ƒë·ªÉ tag ho·∫∑c kh√¥ng tag.
- M·ªói ID ng∆∞·ªùi tag c√°ch nhau b·∫±ng d·∫•u ph·∫©y.
1. Nh·∫≠p ID k√™nh (nh·∫≠p done ƒë·ªÉ k·∫øt th√∫c)
2. Nh·∫≠p t√™n file ch·ª©a token cho t·ª´ng k√™nh.
3. Ch·ªçn file ch·ª©a n·ªôi dung tin nh·∫Øn (c√°ch ng√¥n=d·∫•u ph·∫©y).
4. Nh·∫≠p delay token t·ª´ng k√™nh.
    """
    print(instructions)

async def validate_token(token):
    url = "https://discord.com/api/v10/users/@me"
    headers = {"Authorization": token}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                return True
            else:
                logging.error(f"{Fore.RED}[UNAUTHORIZED] Token kh√¥ng h·ª£p l·ªá: {token}")
                return False

async def load_tokens_from_file(token_file):
    if not os.path.exists(token_file):
        logging.error(f"File {token_file} kh√¥ng t·ªìn t·∫°i.")
        return []
    
    with open(token_file, 'r', encoding='utf-8') as file:
        tokens = file.read().splitlines()
        
    if not tokens:
        logging.error(f"File {token_file} ch·ª©a token tr·ªëng.")
    return tokens

async def handle_response(response, channel_id, message, token):
    if len(message.splitlines()) > 10:
        message_lines = message.splitlines()
        message = "\n".join(message_lines[:5] + message_lines[-5:])
    
    token_preview = token[:5] + "..." + token[-5:] if len(token) > 10 else token
    message_words = message.split()
    message_preview = " ".join(message_words[:5]) + "..." + " ".join(message_words[-5:]) if len(message_words) > 10 else message
    
    try:
        if response.status == 200:
            logging.info(f"{Fore.GREEN}[DONE] Token {token_preview} ƒë√£ g·ª≠i th√†nh c√¥ng tin nh·∫Øn: \"{message_preview}\" ƒë·∫øn k√™nh {channel_id}.")
            return 0
        elif response.status == 429:
            retry_after = await response.json()
            retry_after_time = retry_after.get("retry_after", 1)
            logging.warning(f"{Fore.RED}[RATE LIMIT] T·∫°m d·ª´ng {retry_after_time} gi√¢y!")
            return retry_after_time
        elif response.status == 401:
            logging.error(f"{Fore.RED}[UNAUTHORIZED] L·ªói x√°c th·ª±c: Ki·ªÉm tra l·∫°i token cho k√™nh {channel_id}.")
            return 0
        elif response.status in [500, 502]:
            logging.warning(f"{Fore.RED}[SERVER ERROR] L·ªói m√°y ch·ªß, th·ª≠ l·∫°i sau!")
            return 5
        elif response.status == 408:
            logging.warning(f"{Fore.RED}[TIMEOUT] Y√™u c·∫ßu timeout, th·ª≠ l·∫°i!")
            return 5
        else:
            logging.error(f"{Fore.RED}[ERROR] L·ªói {response.status}: {await response.text()}")
            return 5
    except Exception as e:
        logging.error(f"{Fore.RED}[ERROR] L·ªói x·ª≠ l√Ω ph·∫£n h·ªìi: {e}")
        return 5

def get_valid_input(prompt, valid_func, error_message="Input kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i."):
    while True:
        user_input = input(prompt)
        if valid_func(user_input):
            return user_input
        else:
            print(error_message)

def is_valid_delay(input_str):
    try:
        delay = float(input_str)
        if delay <= 0:
            raise ValueError
        return True
    except ValueError:
        return False

def is_valid_number(input_str):
    try:
        float(input_str)
        return True
    except ValueError:
        return False

def is_valid_channel_id(input_str):
    return input_str.isdigit()


async def check_file_exists(file_path):
    if not os.path.exists(file_path):
        print(f"{Fore.RED}[ERROR] T·ªáp tin {file_path} kh√¥ng t·ªìn t·∫°i.")
        return False
    return True

async def process_tokens(token_files):
    for token_file in token_files:
        if not await check_file_exists(token_file):
            continue
        tokens = await load_tokens_from_file(token_file)
        if not tokens:
            continue

async def handle_token_error(token, error):
    token_preview = token[:5] + "..." + token[-5:] if len(token) > 10 else token
    logging.error(f"{Fore.RED}[TOKEN ERROR] Token {token_preview} g·∫∑p l·ªói: {str(error)}. B·ªè qua token n√†y v√† ti·∫øp t·ª•c.")

async def spam_message(token, channel_id, message, delay, color, semaphore):
    headers = {
        "Authorization": token,
        "Content-Type": "application/json"
    }
    url = f"https://discord.com/api/v10/channels/{channel_id}/messages"
    
    if len(message) > 2000:
        logging.warning(f"{Fore.YELLOW}[WARNING] Tin nh·∫Øn d√†i h∆°n 2000 k√Ω t·ª±, s·∫Ω b·ªã c·∫Øt b·ªõt.")
        message = message[:2000]
        logging.info(f"{Fore.YELLOW}[INFO] Tin nh·∫Øn ƒë√£ b·ªã c·∫Øt b·ªõt xu·ªëng 2000 k√Ω t·ª±.")
    
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                async with semaphore:
                    async with session.post(url, json={"content": message}, headers=headers) as response:
                        retry_after = await handle_response(response, channel_id, message, token)
                        
                        if retry_after:
                            logging.info(f"{Fore.YELLOW}[INFO] Ch·ªù {retry_after} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i.")
                            await asyncio.sleep(retry_after)
                        else:
                            await asyncio.sleep(delay + random.uniform(0.5, 1.5))
            except Exception as e:
                logging.error(f"{Fore.RED}[EXCEPTION] {str(e)}")
                await asyncio.sleep(1)
                continue

async def spam_message_nhay(token, channel_id, messages, delay, color, mention_user=False, user_ids=[], semaphore=None):
    if len(token) > 10:
        token_preview = token[:5] + "..." + token[-5:]
    else:
        token_preview = token

    headers = {
        "Authorization": token,
        "Content-Type": "application/json"
    }
    url = f"https://discord.com/api/v10/channels/{channel_id}/messages"
    
    if user_ids:
        mention_string = " ".join([f"<@{user_id}>" for user_id in user_ids])
    
    async with aiohttp.ClientSession() as session:
        while True:  
            for message in messages:
                try:
                    async with semaphore:
                        if mention_user:
                            message = f"{mention_string} {message}"
                        async with session.post(url, json={"content": message}, headers=headers) as response:
                            retry_after = await handle_response(response, channel_id, message, token)
                            if retry_after:
                                await asyncio.sleep(retry_after)
                            await asyncio.sleep(delay + random.uniform(0.5, 1.5))  
                except Exception as e:
                    await handle_token_error(token, e)
                    break

async def fake_typing_and_send_message(token, channel_id, messages, delay, color, mention_user, user_ids, semaphore):
    headers = {
        "Authorization": token,
        "Content-Type": "application/json"
    }
    url = f"https://discord.com/api/v10/channels/{channel_id}/messages"
    
    mention_string = " ".join([f"<@{user_id}>" for user_id in user_ids]) if mention_user else ""
    
    async with aiohttp.ClientSession() as session:
        while True:
            for message in messages:
                typing_url = f"https://discord.com/api/v10/channels/{channel_id}/typing"
                try:
                    async with session.post(typing_url, headers=headers):
                        logging.info(f"{Fore.CYAN}ƒêang so·∫°n tin nh·∫Øn...")
                    for char in message:
                        sys.stdout.write(char)
                        sys.stdout.flush()
                        await asyncio.sleep(0.05)

                    async with semaphore:
                        message_to_send = f"{mention_string} {message}" if mention_user else message
                        while True:
                            async with session.post(url, json={"content": message_to_send}, headers=headers) as response:
                                retry_after = await handle_response(response, channel_id, message, token)
                                if retry_after:
                                    logging.info(f"{Fore.YELLOW}ƒêang ch·ªù {retry_after} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...")
                                    await asyncio.sleep(retry_after)
                                else:
                                    break
                    await asyncio.sleep(delay)
                except Exception as e:
                    await handle_token_error(token, e)
                    break

async def simulate_typing_and_send_message(token, channel_id, messages, delay, color, mention_user, user_ids, semaphore, name_to_call=None):
    headers = {
        "Authorization": token,
        "Content-Type": "application/json"
    }
    url = f"https://discord.com/api/v10/channels/{channel_id}/messages"
    
    mention_string = " ".join([f"<@{user_id}>" for user_id in user_ids]) if mention_user else ""
    
    async with aiohttp.ClientSession() as session:
        while True:
            for message in messages:
                typing_url = f"https://discord.com/api/v10/channels/{channel_id}/typing"
                try:
                    async with session.post(typing_url, headers=headers):
                        logging.info(f"{Fore.CYAN}ƒêang so·∫°n tin nh·∫Øn...")
                    
                    if name_to_call:
                        message = message.replace("{name}", name_to_call)
                    
                    for char in message:
                        sys.stdout.write(char)
                        sys.stdout.flush()
                        await asyncio.sleep(0.05)

                    async with semaphore:
                        message_to_send = f"{mention_string} {message}" if mention_user else message
                        while True:
                            async with session.post(url, json={"content": message_to_send}, headers=headers) as response:
                                retry_after = await handle_response(response, channel_id, message, token)
                                if retry_after:
                                    logging.info(f"{Fore.YELLOW}ƒêang ch·ªù {retry_after} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...")
                                    await asyncio.sleep(retry_after)
                                else:
                                    break
                    await asyncio.sleep(delay)
                except Exception as e:
                    await handle_token_error(token, e)
                    break

async def main():
    print_header()
    print_author()
    print_instructions()

    choice = get_valid_input(f"{Style.BRIGHT + Fore.MAGENTA}Ch·ªçn ch·ª©c nƒÉng (1: Spam, 2: Nh√¢y, 3: Nh√¢y Fake Typing, 4: R√©o T√™n): ", 
                             lambda x: x in ["1", "2", "3", "4"], "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")

    mention_user = False
    name_to_call = None
    if choice == "2" or choice == "3" or choice == "4":
        mention_user = input(f"{Style.BRIGHT + Fore.YELLOW}C√≥ mu·ªën tag ng∆∞·ªùi d√πng kh√¥ng? (y/n): ").strip().lower() == 'y'
    
    if mention_user:
        user_ids_input = input(f"{Style.BRIGHT + Fore.YELLOW}Nh·∫≠p ID ng∆∞·ªùi c·∫ßn tag (c√°ch nhau b·ªüi d·∫•u ph·∫©y): ")
        user_ids = [user_id.strip() for user_id in user_ids_input.split(',')]
    else:
        user_ids = []

    if choice == "4":
        name_to_call = input(f"{Style.BRIGHT + Fore.YELLOW}Nh·∫≠p t√™n c·∫ßn r√©o: ").strip()

    channel_ids = []
    while True:
        channel_id_input = input(f"{Style.BRIGHT + Fore.MAGENTA}Nh·∫≠p ID k√™nh (ho·∫∑c nh·∫≠p 'done' ƒë·ªÉ k·∫øt th√∫c): ")
        if channel_id_input.strip().lower() == "done":
            break
        elif is_valid_channel_id(channel_id_input):
            channel_ids.append(channel_id_input.strip())
        else:
            print(f"{Fore.RED}[ERROR] ID k√™nh kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")

    tokens_map = {}
    for idx, channel_id in enumerate(channel_ids):
        color = CHANNEL_COLORS[idx % len(CHANNEL_COLORS)]
        token_file = input(f"{color}T√™n file token cho k√™nh {channel_id}: ")

        tokens = await load_tokens_from_file(token_file)
        if not tokens:
            return

        for token in tokens:
            if not await validate_token(token):
                continue

        tokens_map[channel_id] = tokens

    txt_files = [f for f in os.listdir() if f.endswith('.txt')]
    if not txt_files:
        logging.error(f"Kh√¥ng t√¨m th·∫•y file .txt n√†o trong th∆∞ m·ª•c.")
        return

    print(f"{Style.BRIGHT + Fore.CYAN}C√°c file .txt c√≥ s·∫µn:")
    for idx, file_name in enumerate(txt_files):
        print(f"{Style.BRIGHT + Fore.GREEN}{idx + 1}. {file_name}")

    try:
        file_indexes = input(f"{Style.BRIGHT + Fore.YELLOW}Ch·ªçn file ch·ª©a tin nh·∫Øn (nh·∫≠p s·ªë th·ª© t·ª±, c√°ch nhau b·ªüi d·∫•u ph·∫©y): ")
        file_indexes = [int(i) - 1 for i in file_indexes.split(',')]
        if any(index < 0 or index >= len(txt_files) for index in file_indexes):
            logging.error(f"Ch·ªçn file kh√¥ng h·ª£p l·ªá.")
            return
    except ValueError:
        logging.error(f"Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.")
        return

    files_content = []
    for file_index in file_indexes:
        file_path = txt_files[file_index]
        with open(file_path, 'r', encoding='utf-8') as file:
            files_content.append(file.read())

    try:
        delay = float(input(f"{Style.BRIGHT + Fore.YELLOW}Nh·∫≠p delay cho t·∫•t c·∫£ c√°c token (gi√¢y): "))
    except ValueError:
        logging.error(f"Delay ph·∫£i l√† s·ªë h·ª£p l·ªá.")
        return

    tasks = []
    semaphore = asyncio.Semaphore(MAX_CONCURRENT_REQUESTS)

    for idx, (channel_id, tokens) in enumerate(tokens_map.items()):
        color = CHANNEL_COLORS[idx % len(CHANNEL_COLORS)]
        for i, token in enumerate(tokens):
            if choice == "1":
                tasks.append(spam_message(token, channel_id, files_content[i % len(files_content)], delay, color, semaphore))
            elif choice == "2":
                messages = files_content[i % len(files_content)].splitlines()
                tasks.append(spam_message_nhay(token, channel_id, messages, delay, color, mention_user, user_ids, semaphore))
            elif choice == "3":
                messages = files_content[i % len(files_content)].splitlines()
                tasks.append(simulate_typing_and_send_message(token, channel_id, messages, delay, color, mention_user, user_ids, semaphore))
            elif choice == "4":
                messages = files_content[i % len(files_content)].splitlines()
                tasks.append(simulate_typing_and_send_message(token, channel_id, messages, delay, color, mention_user, user_ids, semaphore, name_to_call))

    logging.info(f"\n{Style.BRIGHT + Fore.MAGENTA}RUN BY PHAM ANH TIEN‚ö°\n")
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
